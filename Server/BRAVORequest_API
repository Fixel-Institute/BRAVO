#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May 18 17:33:17 2024

@author: jcagle
"""

import requests
import json
import os
import pickle as pkl

class BRAVOPlatformRequest:
    def __init__(self, api_key, server="https://localhost"):
        self.__Server = server
        self.__request = requests.Session()
        self.__API_Key = api_key
        self.__Headers = {"Content-Type": "application/json", "X-Secure-API-Key": api_key} 
    
    def query(self, url, data=None, files=None):
        if data:
            return self.__request.post(self.__Server + url,
                                       json.dumps(data),
                                       headers={"Content-Type": "application/json", "X-Secure-API-Key": self.__API_Key},
                                       verify="Certificates/BRAVO_CA.pem")
        elif files:
            return self.__request.post(self.__Server + url,
                                       files=files,
                                       headers={"X-Secure-API-Key": self.__API_Key},
                                       verify="Certificates/BRAVO_CA.pem")
        else:
            return self.__request.post(self.__Server + url,
                                       headers={"Content-Type": "application/json", "X-Secure-API-Key": self.__API_Key},
                                       verify="Certificates/BRAVO_CA.pem")
    
    def QueryStudyParticipants(self):
        response = self.query("/api/queryStudyParticipant")
        if response.status_code == 200:
            payload = response.json()
            return payload
        else:
            if response.status_code == 400:
                raise Exception(f"Network Error: {response.json()}")
            else:
                raise Exception(f"Network Error: {response.status_code}")
    
    def CreateStudyParticipant(self, study, name, dob=None, sex=None, diagnosis=None, disease_start_time=None):
        data = {"name": name, "study": study, "dob": dob, "sex": sex, 
                "diagnosis": diagnosis, "disease_start_time": disease_start_time}
        
        response = self.query("/api/createStudyParticipant", data)
        if response.status_code == 200:
            payload = response.json()
            return payload
        else:
            if response.status_code == 400:
                raise Exception(f"Network Error: {response.json()}")
            else:
                raise Exception(f"Network Error: {response.status_code}")
    
    def UploadData(self, study, participant, data_type, files, metadata):
        form = {"study": (None, study), 
                "participant": (None, participant), 
                "data_type": (None, data_type), 
                "metadata": (None, metadata)}
        if type(files) == list:
            for i in range(len(files)):
                form["file" + str(i)] = files[i]
        else:
            form["file"] = files
            
        response = self.query("/api/uploadData", files=form)
        if response.status_code == 200:
            payload = response.json()
            return payload
        else:
            if response.status_code == 400:
                raise Exception(f"Network Error: {response.json()}")
            else:
                raise Exception(f"Network Error: {response.status_code}")
            
BRAVO_Database_DIR = ""

with open(BRAVO_Database_DIR + os.path.sep + "PatientLibrary.pkl", "rb") as file:
    pklRead = pkl.load(file)
EncryptionDictionary = pklRead["EncryptionDictionary"]
ExistingDevices = pklRead["ExistingDevices"]
ExistingPatients = pklRead["ExistingPatients"]
ExistingFiles = pklRead["ExistingFiles"]

# Secure Keys
BRAVO_API_Key = ""
Requester = BRAVOPlatformRequest(BRAVO_API_Key)
Studies = Requester.QueryStudyParticipants()
#participant = Requester.CreateStudyParticipant("Generic Study", "Demo Participant")
for i in range(len(Studies["studies"])):
    if Studies["studies"][i]["name"] == "Generic Study":
        studyId = Studies["studies"][i]["uid"]
        Participants = Studies["participants"][studyId]

# %% Create Study Participants
ParticipantList = [participant["name"] for participant in Participants]
for patient in ExistingPatients.keys():
    if not EncryptionDictionary["Name"][patient] in ParticipantList:
        participant = Requester.CreateStudyParticipant(studyId, 
                                                EncryptionDictionary["Name"][patient])

# %% Upload Data
patient = ""
files = []
for device in ExistingPatients[patient]:
    for file in ExistingDevices[device]:
        files.append(open(BRAVO_Database_DIR + os.path.sep + "Encrypted" + os.path.sep + file))

ParticipantFound = None
for participant in Participants:
    if EncryptionDictionary["Name"][patient] == participant["name"]:
        ParticipantFound = participant
        
if not ParticipantFound:
    ParticipantFound = Requester.CreateStudyParticipant(studyId, EncryptionDictionary["Name"][patient])
    Participants.append({"uid": ParticipantFound["uid"], "name": EncryptionDictionary["Name"][patient]})

Requester.UploadData(study=studyId, 
                     participant=ParticipantFound["uid"], 
                     data_type="MedtronicJSON", 
                     files=files,
                     metadata=json.dumps({"device_location": "", 
                                 "infer_from_device": True}))



