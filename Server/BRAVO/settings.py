"""
Django settings for BRAVO project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os, sys
import json
import datetime
import neomodel

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
if os.path.exists(os.path.join(BASE_DIR, '.env')):
    with open(os.path.join(BASE_DIR, '.env'), "r") as file:
        config = json.load(file)
    for key in config.keys():
        os.environ[key] = config[key]
    sys.path.append(os.environ["PYTHON_UTILITY"])

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_DIR = os.path.join(BASE_DIR, "static")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

DATASERVER_PATH = os.environ.get('DATASERVER_PATH')
if not DATASERVER_PATH.endswith(os.path.sep):
    DATASERVER_PATH += os.path.sep
os.makedirs(DATASERVER_PATH + "cache", exist_ok=True)
os.makedirs(DATASERVER_PATH + "imaging", exist_ok=True)
os.makedirs(DATASERVER_PATH + "raws", exist_ok=True)
os.makedirs(DATASERVER_PATH + "recordings", exist_ok=True)
os.makedirs(DATASERVER_PATH + "visualization", exist_ok=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not (os.environ.get('MODE') == "PRODUCTION")

BASE_URL = 'https://' + os.environ.get('SERVER_ADDRESS')
STATIC_URL = BASE_URL + '/'
CSRF_TRUSTED_ORIGINS = [BASE_URL]
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIIE_HTTPONLY = True

ALLOWED_HOSTS = ['localhost', os.environ.get('SERVER_ADDRESS')]
CORS_ALLOWED_ORIGINS = []

# Application definition
INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'channels',
    'Backend'
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'Backend.authentication.BRAVOCSRFViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BRAVO.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'Backend.authentication.BRAVOJWTAuthentication'
    ]
}

WSGI_APPLICATION = 'BRAVO.wsgi.application'
ASGI_APPLICATION = 'BRAVO.asgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.environ.get('REDIS_HOST'), 6379)],
            "capacity": 1500,  # default 100
            "expiry": 10,  # default 60
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
    }
}

# JWT Token Information
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(hours=1)
}

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
neomodel.config.DATABASE_URL = os.environ.get('NEO4J_BOLT')

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTHENTICATION_BACKENDS = ["Backend.models.PlatformUserAuthBackend"]
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Celery Scheduler
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django DB Automatic Reconnect
import importlib

from django.conf import settings
from django.db.backends.utils import CursorWrapper

for name, config in settings.DATABASES.items():
    module = importlib.import_module(config["ENGINE"] + ".base")

    def ensure_connection(self):
        if self.connection is not None:
            try:
                with CursorWrapper(self.create_cursor(), self) as cursor:
                    cursor.execute("SELECT 1")
                return
            except Exception:
                pass

        with self.wrap_database_errors:
            self.connect()

    module.DatabaseWrapper.ensure_connection = ensure_connection
    